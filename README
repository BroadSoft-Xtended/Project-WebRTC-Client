## What you need to build webrtc

You just need to have [Node.js](http://nodejs.org/) and [Git](http://git-scm.com/). Optionally you also need [PhantomJS](http://phantomjs.org/) if you want to run test units.


### Node.js

* [Install Node.js via package manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)
  e.g. on fedora
   yum install npm

* [Install Node.js from sources](http://nodejs.org)

### Git

* [Install Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)


### PhantomJS

(optional, just for running unit tests)

* [Install PhantomJS](http://phantomjs.org/download.html)
* In modern Debian/Ubuntu systems PhantomJS can be installed via `apt-get install phantomjs`


## How to build webrtc

Install grunt-cli globally:
```
$ npm install -g grunt-cli
```

Enter the directory and install the Node.js dependencies:
```
$ cd webrtc && npm install
```

Make sure you have `grunt` installed by testing:
```
$ grunt -version
```

Finally, run `grunt` command with no arguments to get a complete version of webrtc:
```
$ grunt
```

The built version of webrtc will be available in the `dist/` subdirectory in both flavors: normal (uncompressed)  and minified, both linted with [JSLint](http://jslint.com/). There will be also a file named `dist/webrtc-devel.js` which is an exact copy of the uncompressed file.


## Development version

Run `grunt devel` for just generating the `dist/webrtc-devel.js` file. An uncompressed webrtc source file named `webrtc-devel.js` will be created in `dist` directory.


## Test units

webrtc includes test units based on [QUnit](http://qunitjs.com/). Test units use the `dist/webrtc-devel.js` file. Run the tests as follows:
```
$ grunt test

Running "qunit:noWebRTC" (qunit) task
Testing testNoWebRTC.html.........OK
>> 250 assertions passed (177ms)
```

## Configuration

The configuration file will be copied from js/client-config.js.example to js/client-config.js on the first run
of grunt if it doesn't exist already.

The following options exist

  enableHD: permits use of the settingHD cookie or the hd HTTP URI parameter
  enableCallControl: enables window to enter SIP URI and call button
  enableCallTimer: enables display of how long the users is on a call
  enableCallHistory: enables client to maintain call history.  History is shown via <shift> h
  enableFullScreen: enables button for expanding client to full screen
  enableSelfView: enables button for enabling/disabling self view
  enableCallStats: enables display of call statistics via <shift> s.  Stats include Bitrate in/out, Lost packets, and lost percent for audio and video. Video stats also include frame rate in and out and resolution in and out. Audio stats also include audio level in and out. The total jitter of the link is also shown.
  enableDiaplad: enables display of a dialpad
  enableMute: enables a mute button
  enableMessages: enable the message box display, which displays status messages on connection establishment, registration, call progress.  Provide some examples from the file.
  enableRegistrationIcon: enables an icon that indicates whether user is registered or not.  Fades away under normal operating conditions.  Stays red when there is a problem.
  enableConnectionIcon: enables an icon that indicates whether the user is connected via WebSockets.  Fades away under normal operating conditions.  Stays red when there is a problem.
  enableWindowDrag: enables user to drag the self view, statistics, and history window around.
  enableSettings: enables the user to configure individual user settings that are stored as cookies.
  enableAutoAnswer: enables automatic answer of incoming calls.
  enableAutoAcceptReInvite: enables automatic answer of incoming reInvite requests
  enableConnectLocalMedia: enables connecting to users local media before the call
  enableTransfer: enables the transfer button
  enableHold: enables the hold/resume button
  enableIms: enables 'P-Preferred-Identity' on ExSIP.UA

  volumeClick: 0 or 1.  Sets the audio volume for the click tone.
  volumeDTMF: 0 or 1.  Sets the DTMF tone volume.
  domainFrom: default domain to use in the From header
  domainTo: default domain to use in the To header
  allowOutside: allow calls that are destined for a different domain
  stunServer: IP address of the STUN server
  stunPort: port of the STUN server
  websocketsServers: enables specification of the WebSockets server(s) to connect to.  Replace ws_uri and ws with wss_uri and wss respectively for secure WebSockets.
  networkUserId: authorization user eg. 8323303809
  endCallURL: url to send the browser to at the end of a call
  bandwidthLow: bandwidth in kbps to use for low resolution.  Default is 128
  bandwidthMed: bandwidth in kbps to use for medium resolution.  Default is 512
  bandwidthHigh: bandwidth in kbps to use for high resolution.  Default is 2048
  expires: expiry time in days for cookies
  register: register when password is empty
  debug: enable logs in console
  displayResolution: resolution of the display eg. 960x720
  encodingResolution: resolution of the video encoding eg. 960x720

  messageProgress: message to show on SIP progress,
  messageOutsideDomain: message to show if address is outside domain,
  messageStarted: message to show when call has started,
  messageHold: message to show when call is on hold,
  messageResume: message to show when call has been resumed,
  messageEnded: message to show when call has ended,
  messageCall: message to show when connecting,
  messageConnected: message to show when connected,
  messageConnectionFailed: message to show when connection failed,
  messageRegistered: message to show when registered,
  messageRegistrationFailed: message to show when registration failed,
  messageEmptyDestination: message to show when address is not valid,
  messageGetUserMedia: message to show when retrieving user media failed